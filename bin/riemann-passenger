#!/usr/bin/env ruby

# Collects Passenger metrics and submits them to Riemann

require File.expand_path('../../lib/riemann/tools', __FILE__)

class Riemann::Tools::PassengerStatus
  include Riemann::Tools

  def initialize
    raise 'Must run as root' unless Process.uid == 0
  end

  def passenger_raw_output
    $passenger_output = `RBENV_VERSION=system passenger-status`
  end
  
  def passenger_global_metrics
    global_metrics = $passenger_output.match(/----------- General information -----------(.*)----------- Application groups -----------/m).captures.first.strip
    global_metrics.split("\n").each do |line|
      case
      when line[/Max pool size/]
        alert "Passenger Max_pool_size", "ok",  line[/\d.*$/], ""
      when line[/Processes/]
        alert "Passenger Current_process_number", "ok", line[/\d.*$/], ""
      when line[/Requests in top-level queue/]
        alert "Passenger Current_top_level_queue_requests", "ok", line[/\d.*$/], ""
      end
    end
  end
  
  def passenger_app_metrics
    app_metrics = $passenger_output.match(/----------- Application groups -----------(.*)/m).captures.first.strip
    app_metrics.split("\n\n").each do |app_instances|
      process_app_group(app_instances)
    end
  end
  
  def process_app_group(app_instances)
    app_instances = app_instances.split("\n")
    app_dir_name = app_instances.first.split("/")[-2]
    if app_dir_name[/\./]
      app_dir_name.gsub!(".", "_")
    end
    report_app_queue(app_dir_name, app_instances)
    process_app_instances(app_dir_name, app_instances[3..-1])
  end

  def report_app_queue(app_dir_name, app_instances)
    app_group_requests = app_instances[2][/\d.*$/]
    alert "Passenger #{app_dir_name} application_queue_requests", "ok", app_group_requests, ""
  end
  
  def process_app_instances(app_dir_name, app_instances)
    i = 0
    app_instances.each_slice(2) do |instance_stats|
      instance_stats.each do |line|
        line.split("   ").each do |entry|
          case
          when entry[/PID/]
            alert "Passenger #{app_dir_name} instance_#{i}_PID", "ok", entry[/\d.*/], ""
          when entry[/Processed/]
            alert "Passenger #{app_dir_name} instance_#{i}_Processed", "ok", entry[/\d.*/], ""
          when entry[/CPU/]
            alert "Passenger #{app_dir_name} instance_#{i}_CPU_Percent", "ok," entry[/\d/], ""
          when entry[/Memory/]
            alert "Passenger #{app_dir_name} instance_#{i}_Memory", "ok", entry[/\d.*/], ""
          end
        end
      end
      i += 1
    end
  end
  
  def passenger_pool_metrics
    passenger_raw_output
    passenger_global_metrics
    passenger_app_metrics
  end

  def alert(service, state, metric, description)
    report(
      :service => service.to_s,
      :state => state.to_s,
      :metric => metric.to_f,
      :description => description
    )
  end
  
  def tick
    passenger_pool_metrics
  end

end

Riemann::Tools::PassengerStatus.run